# Execution begins at address 0 
    .pos 0
    irmovq stack, %rsp  # Set up stack pointer
    call main           # Execute main program
    halt                # Terminate program 

# Array of 4 elements
    .align 8
array:
    .quad 0x000d000d000d
    .quad 0x00c000c000c0
    .quad 0x0b000b000b00
    .quad 0xa000a000a000

main:
    irmovq array,%rdi
    irmovq $4,%rsi
    call abssum
    ret

# long abssum(long *start, long count)
# start in %rdi, count in %rsi
abssum:
    irmovq $8, %r8
    irmovq $1, %r9
    xorq %rax,%rax
    andq %rsi,%rsi
    jmp     test
loop:
    mrmovq (%rdi),%r10
    andq %r10, %r10
    jl reset
add:
    addq %r10,%rax
    addq %r8,%rdi
    subq %r9,%rsi
test:
    jne    loop
    ret
reset:
    irmovq $-1, %r11
    xorq %r11, %r10 # complement
    addq %r9, %r10  # add one
    jmp add

# Stack starts here and grows to lower addresses
    .pos 0x200
stack:
