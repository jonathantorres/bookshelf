// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // if A-instruction select the contents of the instruction, otherwise the output of the ALU
    Mux16(a=instruction, b=aluout1, sel=instruction[15], out=iout);

    // Store in A register only if A-instruction or specified in the C instruction
    Not(in=instruction[15], out=ainst);
    Or(a=ainst, b=instruction[5], out=storea);
    ARegister(in=iout, load=storea, out=aout1, out=aout2, out[0..14]=addressM);

    // Store in D register only if specified in the instruction
    And(a=instruction[15], b=instruction[4], out=loadd);
    DRegister(in=aluout2, load=loadd, out=aluin1); 

    // decide if the first input of the ALU comes from memory or from the A register
    Mux(a=false, b=instruction[12], sel=instruction[15], out=msel);
    Mux16(a=aout1, b=inM, sel=msel, out=aluin2);

    // execute instruction
    ALU(
        x=aluin1,
        y=aluin2,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM,
        out=aluout1,
        out=aluout2,
        zr=iszero,
        ng=isneg
    );

    // should we write to M?
    And(a=instruction[3], b=instruction[15], out=writeM);

    // not zero and not neg
    Not(in=iszero, out=notzero);
    Not(in=isneg, out=notneg);

    // jump bits
    DMux8Way(
        in=true,
        sel=instruction[0..2],
        a=trash,
        b=gt,
        c=eq,
        d=ge,
        e=lt,
        f=ne,
        g=le,
        h=mp
    );

    // JGT?
    And(a=notzero, b=notneg, out=notzrng);
    And(a=gt, b=notzrng, out=jgt);

    // JEQ?
    And(a=iszero, b=notneg, out=zrnng);
    And(a=eq, b=zrnng, out=jeq);

    // JGE?
    And(a=ge, b=notneg, out=jge);

    // JLT?
    And(a=notzero, b=isneg, out=nzrng);
    And(a=lt, b=nzrng, out=jlt);

    // JNE?
    And(a=ne, b=notzero, out=jne);

    // JLE?
    Or(a=iszero, b=isneg, out=zrorng);
    And(a=le, b=zrorng, out=jle);

    Or8Way(
        in[0]=false,
        in[1]=jgt,
        in[2]=jeq,
        in[3]=jge,
        in[4]=jlt,
        in[5]=jne,
        in[6]=jle,
        in[7]=mp,
        out=jmp
    );

    // is this a jump instruction?
    And(a=jmp, b=instruction[15], out=isjmp);

    // not a jump? just increment
    Not(in=isjmp, out=notjmp);
    PC(in=aout2, reset=reset, load=isjmp, inc=notjmp, out[0..14]=pc);
}
