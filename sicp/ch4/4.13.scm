(include "metacircular-evaluator.scm")

(define (unbound? expr) (tagged-list? expr 'unbound))
(define (unbind-variable expr env) (make-unbound! (cadr expr) env))
(define (make-unbound! var env)
  (let* ((frame (first-frame env))
         (vars (frame-variables frame))
         (vals (frame-values frame)))
    (define (scan pre-vars pre-vals vars vals)
      (if (not (null? vars))
          (if (eq? var (car vars))
              (begin (set-cdr! pre-vars (cdr vars))
                     (set-cdr! pre-vals (cdr vals)))
              (scan vars vals (cdr vars) (cdr vals)))))
    (if (not (null? vars))
        (if (eq? var (car vars))
            (begin (set-car! frame (cdr vars))
                   (set-cdr! frame (cdr vals)))
            (scan vars vals (cdr vars) (cdr vals))))))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((unbound? exp) (unbind-variable exp env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
          (error "Unknown expression type -- EVAL" exp))))

; sample program
(define bound '(define foo 10))
(define notbound '(unbound foo))

(user-print (eval bound the-global-environment)) (newline)
(eval notbound the-global-environment)
