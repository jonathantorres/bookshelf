(include "amb.scm")

(define prog
  '((define (require p)
      (if (not p) (amb)))
    (define (map proc items)
      (if (null? items)
        '()
        (cons (proc (car items))
              (map proc (cdr items)))))
    (define (all? proc items)
      (cond ((null? items) true)
            ((proc (car items)) (all? proc (cdr items)))
            (else false)))
    (define (an-integer-between low high)
      (if (> low high)
        (amb)
        (amb low (an-integer-between (+ low 1) high))))
    (define (distinct? items)
      (cond ((null? items) true)
            ((null? (cdr items)) true)
            ((member (car items) (cdr items)) false)
            (else (distinct? (cdr items)))))
    (define (queens board-size)
      (define (safe? position other-queens)
        (let ((q1r (car position))
              (q1f (cadr position)))
          (all?
            (lambda (queen)
              (let ((q2r (car queen))
                    (q2f (cadr queen)))
                (cond ((= q1r q2r) false)
                      ((= q1f q2f) false)
                      ((= (+ q1r q1f) (+ q2r q2f)) false)
                      ((= (- q1r q1f) (- q2r q2f)) false)
                      (else true))))
            other-queens)))
      (define (place-queens rank queens)
        (if (> rank board-size)
          (reverse (map cadr queens))
          (let ((file (an-integer-between 1 board-size)))
            (let ((position (list rank file)))
              (require (safe? position queens))
              (place-queens (+ rank 1) (cons position queens))))))
      (place-queens 1 '()))
    (begin
      (display (queens 8))
      (newline))))

(define (run)
  (define env (setup-environment))
  (for-each (lambda (p)
              (ambeval p env
                       (lambda (value fail) (cons value (fail)))
                       (lambda () 'ok)))
            prog))

(run)
