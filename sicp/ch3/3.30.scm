(include "simulator.scm")

(define (logical-or s1 s2)
  (cond ((= s1 1) 1)
        ((= s2 1) 1)
        (else
          0)))

(define (or-gate a1 a2 output)
  (define (or-action-procedure)
    (let ((new-value
            (logical-or (get-signal a1) (get-signal a2))))
      (after-delay or-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)

(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

; The delay needed for the output is: n * ((2 * or-delay) + (2 * and-delay))
(define (ripple-carry-adder a b c-in s c-out)
  (define (rca a b s c)
    (if (null? (cdr a))
      (full-adder (car a) (car b) c-in (car s) c)
      (let ((w (make-wire)))
        (full-adder (car a) (car b) w (car s) c)
        (rca (cdr a) (cdr b) (cdr s) w))))
  (rca (reverse a) (reverse b) (reverse s) c-out))

; add two 4-bit numbers (3 + 2 = 5)
(define a1 (make-wire))
(define a2 (make-wire))
(define a3 (make-wire))
(define a4 (make-wire))
(set-signal! a1 0)
(set-signal! a2 0)
(set-signal! a3 1)
(set-signal! a4 1)

(define b1 (make-wire))
(define b2 (make-wire))
(define b3 (make-wire))
(define b4 (make-wire))
(set-signal! b1 0)
(set-signal! b2 0)
(set-signal! b3 1)
(set-signal! b4 0)

(define s1 (make-wire))
(define s2 (make-wire))
(define s3 (make-wire))
(define s4 (make-wire))
(set-signal! s1 0)
(set-signal! s2 0)
(set-signal! s3 0)
(set-signal! s4 0)
(probe 's1 s1)
(probe 's2 s2)
(probe 's3 s3)
(probe 's4 s4)

(define a (list a1 a2 a3 a4))
(define b (list b1 b2 b3 b4))
(define s (list s1 s2 s3 s4))
(define cin (make-wire))
(define cout (make-wire))

(ripple-carry-adder a b cin s cout)

(propagate)
(newline)
