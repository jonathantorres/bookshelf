(define (test-and-set! cell)
  (if (car cell)
    #t
    (begin (set-car! cell #t)
           #f)))

(define (clear! cell)
  (set-car! cell #f))

(define (make-mutex)
  (let ((cell (list #f)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
               (the-mutex 'acquire)))
            ((eq? m 'release) (clear! cell))))
    the-mutex))

(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))

; used to generate account numbers
(define last-acc-num 0)
(define acc-num-lock (make-mutex))

(define (generate-acc-number)
  (acc-num-lock 'acquire)
  (let ((number last-acc-num))
    (set! last-acc-num (+ number 1))
    (acc-num-lock 'release)
    number))

(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((serializer (make-serializer))
        (number (generate-acc-number)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            ((eq? m 'balance) balance)
            ((eq? m 'number) number)
            ((eq? m 'serializer) serializer)
            (else (error "Unknown request -- MAKE-ACCOUNT"
                         m))))
    dispatch))

(define (exchange account1 account2)
  (let ((diff (- (account1 'balance) (account2 'balance))))
    ((account1 'withdraw) diff)
    ((account2 'deposit) diff)))

; our new serialized-exchange procedure
(define (serialized-exchange account1 account2)
  (let ((serializer1 (account1 'serializer))
        (serializer2 (account2 'serializer))
        (exchanger '()))
    (if (< (account1 'number) (account2 'number))
      (set! exchanger (serializer1 (serializer2 exchange)))
      (set! exchanger (serializer2 (serializer1 exchange))))
    (exchanger account1 account2)))

(define a1 (make-account 100))
(define a2 (make-account 50))

(display "a1 (#")
(display (a1 'number))
(display ") ")
(display (a1 'balance))
(newline)

(display "a2 (#")
(display (a2 'number))
(display ") ")
(display (a2 'balance))
(newline)

(serialized-exchange a1 a2)

(display "a1 (#")
(display (a1 'number))
(display ") ")
(display (a1 'balance))
(newline)

(display "a2 (#")
(display (a2 'number))
(display ") ")
(display (a2 'balance))
(newline)
